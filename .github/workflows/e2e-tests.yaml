name: E2E Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Install GCC/G++
        run: sudo apt-get install -y g++

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build astyle library
        run: |
          echo "🔧 Building astyle static library for CGO"
          cd ulc/astyle
          make -f Makefile.cgo

      - name: Run tests sequentially
        run: |
          tests=(
            "tests/basic basic true true"
            "tests/slice slice true true"
            "tests/complex complex true false "
            "libs/iceberg iceberg true false"
            "libs/contlib contlib true false"
            "libs/uql uql true false"
            "libs/substrait substrait true false"
          )

          for test_case in "${tests[@]}"; do
            read test_dir test_name dotnet_enabled rust_enabled <<< "$test_case"

            echo "▶️ Running: $test_name"

            echo "🚀 go run"
            (cd ulc && go run . --source=./../$test_dir --output=$test_name)

            echo "⚙️ C++ compile"
            (cd ulc && g++ -std=c++17 $test_name.cpp)

            if [[ "$dotnet_enabled" == "true" ]]; then
              echo "🧱 .NET setup"
              mkdir -p dotnet_project/app
              dotnet new console --output dotnet_project/app
              mv ulc/$test_name.cs dotnet_project/app/Program.cs
              (cd dotnet_project/app && dotnet build)
              rm -rf dotnet_project
            fi

            if [[ "$rust_enabled" == "true" ]]; then
              echo "🦀 Rust setup"
              mkdir -p rust_project/src
              mv ulc/$test_name.rs rust_project/src/main.rs
              echo "[package]" > rust_project/Cargo.toml
              echo "name = \"$test_name\"" >> rust_project/Cargo.toml
              echo "version = \"0.1.0\"" >> rust_project/Cargo.toml
              echo "edition = \"2021\"" >> rust_project/Cargo.toml
              (cd rust_project && cargo build)
              rm -rf rust_project
            fi

            echo "🧹 Cleanup"
            rm -f ulc/$test_name.cpp
            echo "✅ Done with: $test_name"
          done
